name: CI/CD using github actions & docker

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read

jobs:
  CI-CD:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4.1.0

      - name: make settings.py (about rds)
        run: |
          touch ./app/settings.py
          echo "{{ secrets.SETTINGS }}" > ./app/settings.py

      - name: Login to DockerHub
        uses: docker/login-action@v3.0.0
        with:
          username: ${{secrets.DOCKERHUB_USERNAME}}
          password: ${{secrets.DOCKERHUB_TOKEN}}

      - name: Build and Push Docker Image
        env:
          NAME: ${{ secrets.DOCKERHUB_USERNAME }}
          REPO: allps-scrapper
        run: |
          docker build --platform=linux/amd64 -t $NAME/$REPO:latest .
          docker push $NAME/$REPO:latest

      - name: SSH to EC2
        uses: appleboy/ssh-action@master
        env:
          NAME: ${{ secrets.DOCKERHUB_USERNAME }}
          REPO: allps-scrapper
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          password: ${{ secrets.EC2_SSH_KEY }}
          port: ${{ secrets.EC2_SSH_PORT }}
          script: |
            echo "Delete old container..."
            if docker ps -a | grep ${NAME}/${REPO}:latest; then
              docker stop ${NAME}/${REPO}:latest
              docker rm ${NAME}/${REPO}:latest
            fi
            echo "Delete old container completed."
            echo "Delete old image..."
            IMAGE_ID=$(docker images ${NAME}/${REPO}:latest -q)
            if [ ! -z "$IMAGE_ID" ]; then
              docker rmi $IMAGE_ID
            fi
            echo "Delete old image completed."
            echo "Pulling new image..."
            docker pull ${NAME}/${REPO}:latest
            echo "Pulling new image completed."
            echo "Running new container..."
            docker run -d ${NAME}/${REPO}:latest
            echo "Running new container completed."
